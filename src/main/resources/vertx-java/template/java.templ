@comment{"This is where the generation starts"}
@comment{"==================================="}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{ifacePackageName.replace("io.vertx.", "io.vertx.java.")};\n

@comment{'the current index of the cache'}
@code{cacheDecls=new java.util.ArrayList()}


@declare{'invokeDelegate'}
@if{method.staticMethod}@{helper.getNonGenericType(ifaceFQCN)}@else{}@includeNamed{'rewriteDelegate';method=method}@end{}.@{method.name}(@foreach{param: method.params}@includeNamed{'paramArgument';param=param}@end{', '})
@end{}

@declare{'rewriteDelegate'}
@if{method.ownerTypes.size() > 1}
( /* Work around for https://jira.codehaus.org/browse/GROOVY-6970 */ (@{method.ownerTypes.iterator().next().name}) delegate)
@else{}
this.delegate
@end{}
@end{}

@declare{'paramTemplate'}
	@{param.type.simpleName} @{param.name}
@end{}

@declare{'resultHandlerTemplate'}
	new Handler<AsyncResult<@{eventJavaType}>>() {\n
	      public void handle(AsyncResult<@{eventJavaType}> event) {\n
	        AsyncResult<@{eventGroovyType}> f;\n
	        if (event.succeeded()) {\n
	          f = InternalHelper.<@{eventGroovyType}>result(@{callbackObject});\n
	        } else {\n
	          f = InternalHelper.<@{eventGroovyType}>failure(event.cause());\n
	        }\n
	        @{callbackName}.handle(f);\n
	      }\n
	    }
@end{}

@declare{'paramArgument'}
	@if{param.type.kind == CLASS_API}
		(@{param.type.name}) @{param.name}.getDelegate()
	@else{param.type.kind == CLASS_HANDLER}
		@code{eventType=param.type.args[0]}
		@code{eventKind=eventType.kind}
		@if{eventKind == CLASS_OTHER || eventKind.basic || eventKind == CLASS_VOID || eventKind == CLASS_OBJECT || eventKind.json || eventKind == CLASS_THROWABLE}
			@{param.name}
		@else{eventKind == CLASS_LIST || eventKind == CLASS_SET}
			@code{elementType=eventType.args[0]}
			@code{elementKind=elementType.kind}
			@if{elementKind == CLASS_PRIMITIVE || elementKind == CLASS_BOXED_PRIMITIVE || elementKind == CLASS_STRING}
				@{param.name}
			@else{elementKind == CLASS_API}
				@code{collectionName=eventType.raw.simpleName}
				@code{toGroovyElement= elementType.simpleName + '::new'}
				@code{elementJavaType=elementType.name}
				new Handler<@{collectionName}<@{elementJavaType}>>() {\n
				      public void handle(@{collectionName}<@{elementJavaType}> event) {\n
				        @{param.name}.handle(event.stream().map(@{toGroovyElement}).collect(java.util.stream.Collectors.to@{collectionName}()));\n
				      }\n
				    }
			@else{}
				@{param.name}
			@end{}
		@else{eventKind == CLASS_API}
			new Handler<@{eventType.name}>() {\n
			      public void handle(@{eventType.name} event) {\n
			        @{param.name}.handle(new @{eventType.simpleName}(event));\n
			      }\n
			    }
		@else{eventKind == CLASS_ASYNC_RESULT}
			@code{resultType=eventType.args[0]}
			@code{resultKind=resultType.kind}
			@if{resultKind == CLASS_OTHER || resultKind.basic || resultKind == CLASS_VOID || resultKind == CLASS_OBJECT || resultKind.json}
				@{param.name}
			@else{resultKind == CLASS_LIST || resultKind == CLASS_SET}
				@code{elementType=resultType.args[0]}
				@code{elementKind=elementType.kind}
				@if{elementKind == CLASS_PRIMITIVE || elementKind == CLASS_BOXED_PRIMITIVE || elementKind == CLASS_STRING}
					@{param.name}
				@else{elementKind == CLASS_API}
					@code{collectionName=resultType.raw.simpleName}
					@code{toGroovyElement=elementType.simpleName + '::new'}
					@code{elementJavaType=elementType.name}
					@code{elementGroovyType=elementType.simpleName}
					@code{eventJavaType=collectionName + '<' + elementJavaType + '>'}
					@code{eventGroovyType=collectionName + '<' + elementGroovyType + '>'}
					@code{callbackObject='event.result().stream().map(' + toGroovyElement + ').collect(java.util.stream.Collectors.to' + collectionName + '())'}
					@includeNamed{'resultHandlerTemplate';eventJavaType=eventJavaType;eventGroovyType=eventGroovyType;callbackObject=callbackObject;callbackName=param.name}
				@else{}
					@{param.name}
				@end{}
			@else{resultKind == CLASS_API}
				@includeNamed{'resultHandlerTemplate';eventJavaType=resultType.name;eventGroovyType=resultType.simpleName;callbackObject='new ' + resultType.simpleName + '(event.result())';callbackName=param.name}
			@else{}
				null /* Handler<AsyncResult<@{resultType.name}>> with kind @{resultKind} not yet implemented */
			@end{}
		@else{}
			null /* Handler<@{eventType.name}> with kind @{eventKind} not yet implemented */
		@end{}
	@else{}
		@{param.name}
	@end{}
@end{}

@declare{'returnTypeTemplate'}
	@{type.simpleName}
@end{}

@declare{'startMethodTemplate'}
public @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeVar:method.typeParams}@{typeVar}@end{', '}> @end{}@includeNamed{'returnTypeTemplate';type=method.returnType} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param}@end{', '}) {
@end{}

import java.util.Map;
import io.vertx.lang.java.InternalHelper;
import java.util.concurrent.CompletableFuture;
@comment{"Generate the imports"}
@foreach{importedType:importedTypes}
	@if{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.toString().replace("io.vertx.", "io.vertx.java.")};\n
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
			import @{importedType};\n
		@end{}
	@end{}
@end{}

@if{ifaceComment != null}
/**\n
 *@{ifaceComment.replaceAll('\n(?!$)', '\n *')}
 */\n
@end{}
public @if{concrete}class@else{}interface@end{} @{helper.getSimpleName(ifaceFQCN)}

@if{concrete}
	@if{concreteSuperTypes.size() > 0}
	 extends
		@foreach{concreteSuperType: concreteSuperTypes}
		 @{concreteSuperType.simpleName}
		@end{}
	@end{}
@end{}

@if{abstractSuperTypes.size() > 0}
	 @if{concrete}implements@else{}extends@end{}
	@foreach{abstractSuperType: abstractSuperTypes}
	 @{abstractSuperType.simpleName}
	@end{', '}
@end{} {\n

@if{concrete}

	  final @{helper.getNonGenericType(ifaceFQCN)} delegate;\n
	  public @{ifaceSimpleName}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	@if{concrete && concreteSuperTypes.size() > 0}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	  }\n

	  public Object getDelegate() {\n
	    return delegate;\n
	  }\n

	@foreach{method:methods}
	@if{method.comment != null}
	  /**\n
	   *@{method.comment.replaceAll('\n(?!$)', '\n   *')}
	   */\n
	@end{}
	  @includeNamed{'startMethodTemplate';method:method}\n
	@if{method.fluent}
	    @includeNamed{'invokeDelegate';method:method};\n
	    return this;\n
	@else{method.returnType.name.equals('void')}
	    @includeNamed{'invokeDelegate';method:method};\n
	@else{}
		@if{method.cacheReturn}
		    if (cached_@{cacheDecls.size()} != null) {\n
		      return cached_@{cacheDecls.size()};\n
		    }\n
		@end{}
		@if{method.returnType.kind == CLASS_OBJECT}
			@code{cachedType=method.returnType.simpleName}
		    @{cachedType=method.returnType.simpleName} ret = (@{cachedType=method.returnType.simpleName}) @includeNamed{'invokeDelegate';method:method};\n
		@else{!method.returnType.name.startsWith('io.vertx.') || method.returnType.kind.json}
			@code{cachedType=method.returnType.name}
		    @{method.returnType.simpleName} ret = @includeNamed{'invokeDelegate';method:method};\n
		@else{}
			@code{cachedType=method.returnType.simpleName}
		    @{method.returnType.simpleName} ret= new @{method.returnType.simpleName}(@includeNamed{'invokeDelegate';method:method});\n
		@end{}
		@if{method.cacheReturn}
		    cached_@{cacheDecls.size()} = ret;\n
			@code{cacheDecls.add('private' + (method.staticMethod ? ' static' : '') + ' ' + cachedType + ' cached_' + cacheDecls.size())}
		@end{}
		    return ret;\n
		@end{}
	  }\n

	@if{method.kind == METHOD_FUTURE}
	@code{methodName=method.name}
	@code{futureParams=new java.util.ArrayList(method.params)}
	@code{futureParam=futureParams.remove(futureParams.size()-1)}
	@code{futureType=futureParam.type.args[0].args[0]}
	@code{futureReturnType=new io.vertx.codegen.TypeInfo$Parameterized(io.vertx.codegen.TypeInfo.create(java.util.concurrent.CompletableFuture), java.util.Collections.singletonList(futureType))}
	@code{futureMethod=new io.vertx.codegen.MethodInfo(method.ownerTypes,method.name + 'Future',method.kind,futureReturnType,method.fluent,method.cacheReturn,futureParams,method.comment,method.staticMethod,method.typeParams)}
	  @includeNamed{'startMethodTemplate';method=futureMethod}\n
	    CompletableFuture<@{futureType.simpleName}> @{futureParam.name} = new CompletableFuture<>();\n
	    @{methodName}(@foreach{param:futureParams}@{param.name}@end{', '}@if{futureParams.size() > 0}, @end{}InternalHelper.asyncResultHandler(@{futureParam.name}));\n
	    return @{futureParam.name};\n
	  }\n
	@end{}

	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}

@else{}

	  Object getDelegate();\n

	@foreach{method:methods}
	  @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeVar:method.typeParams}@{typeVar}@end{}> @end{}@{method.returnType.simpleName} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param}@end{', '});\n
	@end{}

@end{}

}\n